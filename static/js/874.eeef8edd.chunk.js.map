{"version":3,"file":"static/js/874.eeef8edd.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactList/ContactList.styled.js","components/ContactListItem/ContactListItem.styled.js","components/IconButton/IconBtutton.styled.jsx","components/IconButton/IconButton.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.js","components/App/App.styled.js","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/ContactForm/ContactForm.styled.js","components/Button/Button.styled.jsx","components/Button/Button.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["export const getItems = state => state.contacts.items;\nexport const getFilterValue = state => state.contacts.filter;\nexport const getLoadingStatus = state => state.contacts.isLoading;\n","import styled from '@emotion/styled';\n\nexport const Contacts = styled.ul`\n  margin-top: 16px;\n  margin-left: 40px;\n  margin-right: 40px;\n`;\n","import styled from '@emotion/styled';\n\nexport const Contact = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  &:not(:last-child) {\n    margin-bottom: 12px;\n  }\n`;\n\nexport const MainContainer = styled.div`\n  display: flex;\n  width: 650px;\n  justify-content: space-between;\n`;\n\nexport const Container = styled.div`\n  margin-right: 24px;\n\n  display: flex;\n  align-items: center;\n`;\n\nexport const ContactName = styled.span`\n  flex-grow: 1;\n  text-transform: capitalize;\n  font-size: 18px;\n\n  margin-left: 8px;\n`;\n\nexport const ContactNumber = styled.span`\n  margin-right: 80px;\n  margin-left: 8px;\n  font-size: 18px;\n`;\n","import styled from '@emotion/styled';\n\nexport const IconButtonStyle = styled.button`\n  margin-left: 10px;\n  border: none;\n  border-radius: 4px;\n  outline: none;\n  padding: 10px;\n  background-color: #400080;\n  color: #ffffff;\n\n  cursor: pointer;\n\n  & svg {\n    display: block;\n  }\n\n  &:hover {\n    background-color: #5218fa;\n    outline: 2px solid #ffffff;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { IconButtonStyle } from './IconBtutton.styled';\n\nconst IconButton = ({\n  type,\n  background = null,\n  color = null,\n  onClick = () => null,\n  children = null,\n  ...allyProps\n}) => {\n  return (\n    <IconButtonStyle\n      background={background}\n      color={color}\n      type={type}\n      onClick={onClick}\n      {...allyProps}\n    >\n      {children}\n    </IconButtonStyle>\n  );\n};\n\nexport default IconButton;\n\nIconButton.propTypes = {\n  type: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  background: PropTypes.string,\n  color: PropTypes.string,\n  children: PropTypes.node.isRequired,\n  'aria-label': PropTypes.string.isRequired,\n};\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport PropTypes from 'prop-types';\n\nimport { HiOutlineUserCircle, HiOutlinePhone } from 'react-icons/hi';\nimport { FaRegTrashAlt } from 'react-icons/fa';\n\nimport {\n  Contact,\n  ContactName,\n  ContactNumber,\n  Container,\n  MainContainer,\n} from './ContactListItem.styled';\n\nimport IconButton from 'components/IconButton';\nimport { getLoadingStatus } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport default function ContactListItem({ item: { id, name, number } }) {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getLoadingStatus);\n\n  return (\n    <Contact>\n      <MainContainer>\n        <Container>\n          <HiOutlineUserCircle size={20} color=\"#400080\" />\n          <ContactName>{name}</ContactName>\n        </Container>\n\n        {isLoading ? (\n          <ContactNumber>Deleting...</ContactNumber>\n        ) : (\n          <Container>\n            <HiOutlinePhone size={20} color=\"#400080\" />\n            <ContactNumber>{number}</ContactNumber>\n          </Container>\n        )}\n      </MainContainer>\n\n      <IconButton\n        type=\"button\"\n        aria-label=\"For delete contact\"\n        onClick={() => dispatch(deleteContact({ id, name }))}\n      >\n        <FaRegTrashAlt />\n      </IconButton>\n    </Contact>\n  );\n}\n\nContactListItem.propTypes = {\n  item: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { useSelector } from 'react-redux';\n\nimport * as selectors from 'redux/contacts/selectors';\n\nimport { Contacts } from './ContactList.styled';\nimport ContactListItem from 'components/ContactListItem';\n\nexport default function ContactList() {\n  const items = useSelector(selectors.getItems);\n  const filterValue = useSelector(selectors.getFilterValue);\n\n  const showFilteredContacts = () => {\n    const normalizedFilter = filterValue.toLocaleLowerCase();\n    return items.filter(item =>\n      item.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const filteredContacts = showFilteredContacts();\n\n  return (\n    <Contacts>\n      {filteredContacts.length > 0 ? (\n        filteredContacts.map(item => (\n          <ContactListItem key={item.id} item={item} />\n        ))\n      ) : (\n        <div style={{ color: 'red', fontSize: '20px' }}>\n          There are no contacts yet!\n        </div>\n      )}\n    </Contacts>\n  );\n}\n","const { default: styled } = require('@emotion/styled');\n\nconst Spinner = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport { Spinner };\n","import React from 'react';\n\nimport GridLoader from 'react-spinners/GridLoader';\n\nimport { Spinner } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <Spinner>\n      <GridLoader color=\"#0000a0\" aria-label=\"Loading Spinner\" size={20} />\n    </Spinner>\n  );\n};\n\nexport { Loader };\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  margin: 0 auto;\n  margin-top: 30px;\n  padding: 20px 20px;\n  width: 800px;\n  text-align: center;\n  justify-content: center;\n  border-radius: 20px;\n  border: 3px solid #333340;\n  background: linear-gradient(62.93deg, #97ccf0 19.68%, #5218fa 89.55%);\n`;\n\nexport const AppTitle = styled.h1`\n  display: block;\n  margin: 0 0 20px;\n  color: #333340;\n  font-size: 32px;\n`;\n\nexport const ContactsTitle = styled.h2`\n  display: block;\n  padding-top: 30px;\n  margin: 0 0 20px;\n  color: #333340;\n  font-size: 24px;\n`;\n\nexport const FilterTitle = styled.p`\n  display: block;\n  margin: 0 0 20px;\n  color: #333340;\n  font-size: 18px;\n`;\n","import styled from '@emotion/styled';\n\nexport const SectionStyle = styled.section`\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Title = styled.h2`\n  font-size: 24px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { SectionStyle, Title } from './Section.styled';\n\nconst Section = ({ title, children }) => {\n  return (\n    <SectionStyle>\n      <Title>{title}</Title>\n      {children}\n    </SectionStyle>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import styled from '@emotion/styled';\nimport { Field } from 'formik';\n\nexport const Label = styled.label`\n  margin: 5px;\n  font-size: 20px;\n`;\n\nexport const FormField = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-right: 5px;\n  align-items: center;\n`;\n\nexport const Input = styled(Field)`\n  margin: 0;\n  outline: none;\n  border: 1px solid #333340;\n  border-radius: 5px;\n  padding: 10px;\n  width: 70%;\n`;\n","import styled from '@emotion/styled';\n\nexport const FormButton = styled.button`\n  display: inline-flex;\n  align-items: center;\n  padding: 5px 20px;\n  border: 1px solid #400080;\n  border-radius: 5px;\n  background-color: #400080;\n  color: #ffffff;\n  font-size: 16px;\n  margin-top: 20px;\n  box-shadow: inset 0 0 3px 1px rgba(0, 0, 0, 0.8),\n    inset rgba(0, 0, 0, 0.3) -5px -5px 8px 5px,\n    inset rgba(255, 255, 255, 0.5) 5px 5px 8px 5px,\n    1px 1px 1px rgba(255, 255, 255, 0.1), -2px -2px 5px rgba(0, 0, 0, 0.5);\n\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: #5218fa;\n    border: 2px solid #ffffff;\n    outline-color: #5218fa;\n  }\n\n  &:active {\n    background-color: #5218fa;\n    outline-color: #5218fa;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { FormButton } from './Button.styled';\n\nconst Button = ({\n  type,\n  title = '',\n  onClick = () => null,\n  children = null,\n}) => {\n  return (\n    <FormButton type={type} onClick={onClick}>\n      {title}\n      {children}\n    </FormButton>\n  );\n};\n\nButton.propTypes = {\n  type: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\nexport default Button;\n","import React from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Formik, Form, ErrorMessage } from 'formik';\n\nimport { toast } from 'react-hot-toast';\n\nimport { FormField, Input, Label } from './ContactForm.styled';\n\nimport Button from '../Button';\n\nimport * as contactsOperations from 'redux/contacts/operations';\nimport * as selectors from 'redux/contacts/selectors';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectors.getItems);\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const onSubmit = (values, { resetForm }) => {\n    const { name } = values;\n    const newName = checkName(name);\n\n    if (newName) {\n      toast.error(`Name ${name} is already in contacts`);\n      return;\n    }\n\n    dispatch(contactsOperations.addContact(values));\n    toast.success(`${values.name} was added to contacts!`);\n    resetForm();\n  };\n\n  const checkName = newName => {\n    const normalyzeName = newName.toLocaleLowerCase();\n    return contacts.find(\n      ({ name }) => name.toLocaleLowerCase() === normalyzeName\n    );\n  };\n\n  return (\n    <div>\n      <Formik initialValues={initialValues} onSubmit={onSubmit}>\n        <Form>\n          <FormField>\n            <Label htmlFor=\"name\">\n              Contact Name\n              <Input\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n              />\n              <ErrorMessage name=\"name\" component=\"div\" />\n            </Label>\n          </FormField>\n\n          <FormField>\n            <Label htmlFor=\"number\">\n              Contact Number\n              <Input\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n              />\n            </Label>\n            <ErrorMessage name=\"number\" component=\"div\" />\n          </FormField>\n\n          <Button type={'submit'} title={'Add Contact'} />\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const FilterWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding-top: 10px;\n  padding-bottom: 10px;\n`;\n\nexport const Input = styled.input`\n  margin: 0;\n  outline: none;\n  width: 60%;\n  border: 1px solid #333340;\n  border-radius: 5px;\n  padding: 10px;\n\n  &:focus,\n  &:hover {\n    outline-color: #400080;\n  }\n`;\n\nexport const Label = styled.label`\n  font-size: 20px;\n`;\n","import React from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { ImCross } from 'react-icons/im';\n\nimport IconButton from '../IconButton';\nimport { FilterWrapper, Input, Label } from './Filter.styled';\n\nimport { setFilter, resetFilter } from 'redux/filterSlice';\n\nimport * as selectors from 'redux/contacts/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectors.getFilterValue);\n\n  const onChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <>\n      <Label htmlFor=\"filter\">Find contact by name:</Label>\n      <FilterWrapper>\n        <Input\n          type=\"text\"\n          name=\"filter\"\n          value={filterValue}\n          onChange={onChange}\n        />\n        {filterValue && (\n          <IconButton\n            color=\"#400080\"\n            type=\"button\"\n            aria-label=\"Clear filter\"\n            onClick={() => dispatch(resetFilter())}\n          >\n            <ImCross />\n          </IconButton>\n        )}\n      </FilterWrapper>\n    </>\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport ContactList from 'components/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getItems, getLoadingStatus } from 'redux/contacts/selectors';\nimport { Loader } from 'components/Loader';\nimport { Container } from 'components/App/App.styled';\nimport Section from 'components/Section';\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const items = useSelector(getItems);\n  const isLoading = useSelector(getLoadingStatus);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <Container>\n      <Section>\n        <ContactForm />\n      </Section>\n      <Section title=\"Contacts\">\n        {isLoading && <Loader />}\n        {!isLoading && items.length === 0 && (\n          <div style={{ color: 'red', fontSize: '20px' }}>No any contacts!</div>\n        )}\n        {items.length > 0 && (\n          <>\n            <Filter />\n            <ContactList />\n          </>\n        )}\n      </Section>\n    </Container>\n  );\n}\n"],"names":["getItems","state","contacts","items","getFilterValue","filter","getLoadingStatus","isLoading","Contacts","styled","Contact","MainContainer","Container","ContactName","ContactNumber","IconButtonStyle","type","background","color","onClick","children","allyProps","ContactListItem","item","id","name","number","dispatch","useDispatch","useSelector","size","deleteContact","ContactList","selectors","filterValue","filteredContacts","normalizedFilter","toLocaleLowerCase","toLowerCase","includes","showFilteredContacts","length","map","style","fontSize","Spinner","require","default","div","Loader","SectionStyle","Title","title","Label","FormField","Input","Field","FormButton","checkName","newName","normalyzeName","find","initialValues","onSubmit","values","resetForm","toast","contactsOperations","htmlFor","pattern","required","component","FilterWrapper","value","onChange","e","setFilter","target","resetFilter","useEffect","fetchContacts"],"sourceRoot":""}